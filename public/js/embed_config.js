// Generated by CoffeeScript 1.7.1
(function() {
  (function(context) {
    var LRSearchWidgets;
    if (window.location.protocol === 'file:') {
      document.write('Error: Cannot load search widget in local file due to Javascript restrictions');
      return;
    }
    LRSearchWidgets = context.LRSearchWidgets = {
      loaded: false,
      widgets: {},
      ready: function(callback) {
        if (this.loaded) {
          return callback();
        } else {
          return this.pending.push(callback);
        }
      },
      pending: [],
      start: function() {
        var callback, _i, _len, _ref, _results;
        this.loaded = true;
        _ref = this.pending;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          _results.push(callback());
        }
        return _results;
      }
    };
    require.config({
      baseUrl: '//cdnjs.cloudflare.com/ajax/libs/',
      shim: {
        jquery: {
          exports: '$',
          init: function() {
            var local;
            local = this.jQuery.noConflict(true);
            return local;
          }
        },
        underscore: {
          exports: '_',
          init: function() {
            var local;
            local = this._.noConflict();
            return local;
          }
        },
        backbone: {
          exports: 'Backbone',
          deps: ['underscore', 'jquery'],
          init: function() {
            var local;
            local = this.Backbone.noConflict();
            return local;
          }
        },
        'jquery.primer': {
          deps: ['jquery']
        },
        'jquery.flot': {
          deps: ['jquery'],
          exports: '$.plot'
        },
        'jquery.flot.pie': {
          deps: ['jquery.flot']
        },
        'jquery.flot.selection': {
          deps: ['jquery.flot']
        },
        'select2': {
          deps: ['jquery']
        },
        mustache: {
          exports: 'Mustache'
        },
        magnific: {
          deps: ['jquery'],
          exports: '$.magnific'
        }
      },
      paths: {
        jquery: 'jquery/1.11.0/jquery',
        jqueryMigrate: 'jquery-migrate/1.2.1/jquery-migrate.min',
        mustache: 'mustache.js/0.7.2/mustache.min',
        underscore: 'underscore.js/1.5.2/underscore-min',
        backbone: 'backbone.js/1.1.0/backbone-min',
        excanvas: 'flot/0.8.2/excanvas.min',
        'jquery.flot': 'flot/0.8.2/jquery.flot.min',
        'jquery.flot.pie': 'flot/0.8.2/jquery.flot.pie.min',
        'jquery.flot.selection': 'flot/0.8.2/jquery.flot.selection.min',
        select2: 'select2/3.4.5/select2.min',
        esbb: window.LRWidget.domain + '/js/es-backbone',
        magnific: 'magnific-popup.js/0.9.9/jquery.magnific-popup.min',
        perfectScrollbar: window.LRWidget.domain + '/vendor/perfect-scrollbar/min/perfect-scrollbar-0.4.8.with-mousewheel.min'
      },
      map: {
        '*': {},
        'jquery-private': {
          'jquery': 'jquery'
        }
      }
    });
    return require(['jquery', 'underscore', 'backbone', 'esbb/es-backbone', 'esbb/simple-view', 'perfectScrollbar'], function($, _, Backbone, ESBB, ESBBApp) {
      var WidgetConfig, defers;
      WidgetConfig = window.LRWidget || {
        api_key: '',
        domain: ''
      };
      defers = [];
      $('.lr-search-widget').each(function() {
        var defer, demo, widgetKey;
        $(this).html('Loading search widget...');
        widgetKey = $(this).data('widgetKey');
        demo = !!$(this).data('demo');
        defers.push(defer = $.Deferred());
        return $.ajax(WidgetConfig.domain + '/api/embed/widget?jsonp=?', {
          dataType: 'jsonp',
          data: {
            widget_key: widgetKey,
            api_key: WidgetConfig.api_key,
            demo: demo
          }
        }).done((function(_this) {
          return function(t) {
            var esbbSimpleApp, queryModel, resultsModel, widgetConfigModel;
            $(_this).html(t.templates.core);
            resultsModel = new ESBB.SearchResultsModel();
            queryModel = new ESBBApp.SearchQueryProxyModel({
              config: {
                search_url: WidgetConfig.domain + '/api/search?api_key=' + WidgetConfig.api_key + '&jsonp=?',
                index: 'lr',
                index_type: 'lr_doc'
              },
              limit: 10,
              query: '',
              facets: t.settings.show_facets || demo ? ['url_domain', 'keys', 'publisher_full', 'mediaFeatures'] : [],
              filter_keys: t.settings.filters || [],
              highlight: ['description']
            });
            widgetConfigModel = new Backbone.Model(t.settings);
            queryModel.on('change:filter_keys', function() {
              return queryModel.search();
            });
            queryModel.resultsModel = resultsModel;
            esbbSimpleApp = new ESBBApp.SimpleAppView({
              model: resultsModel,
              query: queryModel,
              el: $(_this),
              globalConfig: WidgetConfig,
              widgetConfig: widgetConfigModel,
              templates: t.templates
            });
            LRSearchWidgets.widgets[widgetKey] = {
              queryModel: queryModel,
              resultsModel: resultsModel,
              view: esbbSimpleApp,
              configModel: widgetConfigModel
            };
            return defer.resolve();
          };
        })(this)).fail((function(_this) {
          return function() {
            return defer.reject();
          };
        })(this));
      });
      return $.when.apply($, defers).then(function() {
        LRSearchWidgets.start();
        return require(['esbb/features'], function(Features) {
          _.each(LRSearchWidgets.widgets, function(widget, widgetKey) {
            widget.configModel.on('change:font change:main_color change:support_color', function() {
              return Features.createWidgetStyles(widgetKey, widget.configModel.get('font'), widget.configModel.get('main_color'), widget.configModel.get('support_color'));
            });
            return widget.configModel.trigger('change:font');
          });
        });
      });
    });
  })(this);

}).call(this);
